{"pages":[],"posts":[{"title":"hexo之icarus自定义过程","text":"之前正在为了如何保存自己的笔记而烦恼，突然就想到，为什么不写一个博客呢？于是就开始了自己配置博客的过程，因为之前稍微了解过hexo，知道可以和github放在一起，所以很自然的就这么选择了。 但是在自己配置的过程中，由于很多人都只讲怎么做，但是不讲为什么，另外大部分教程的版本都比较老，icarus的文件配置和我看到的有些差别，让我在理解这方面花费了大量的时间(要不是自己有前端的一些基础，就真的要抓瞎了)。于是我把自己在这里走的弯路也分享出来，希望能够帮到大家。 安装首先是安装,npm那一部分不说了。 更换主题我这里选择了icarus主题，建议从github下载icarus直接放到hexo的theme/icarus文件夹中，并修改_config.yml中的theme项为icarus，很多教程有，不表。 控件配置过程hexo可以配置很多插件（widgits），但是icarus本身就自带了一些，所以如果想要修改icarus组件的样式，就得看明白_config.icarus.yml中的内容。在_config.icarus.yml的widgits栏（如果不懂的话，建议先看一下yml的语法，很简单的）。首先知道yml使用-表示集合，就i相当于js中的Object一样。通过type来分辨不同的控件，所以我们需要找到需要修改的集合对其他参数进行修改就可以做到自定义。 修改个人信息栏12345678910111213141516171819202122232425262728293031323334353637383940# Profile widget configurations- # Where should the widget be placed, left sidebar or right sidebar position: left type: profile # Author name author: 熊猫在行动 # Author title author_title: # Author's current location location: 四川大学 # URL or path to the avatar image avatar: /img/avatar.jpg # Whether show the rounded avatar image avatar_rounded: false # Email address for the Gravatar gravatar: # URL or path for the follow button follow_link: https://github.com/Sexypanda8888 # Links to be shown on the bottom of the profile widget social_links: Github: icon: iconfont icon-github-fill url: https://github.com/Sexypanda8888 BiliBili: icon: iconfont icon-bilibili-line url: https://space.bilibili.com/407568287 # Facebook: # icon: fab fa-facebook # url: https://facebook.com # Twitter: # icon: fab fa-twitter # url: https://twitter.com # Dribbble: # icon: fab fa-dribbble # url: https://dribbble.com # RSS: # icon: fas fa-rss # url: / 上面是整个个人信息的控件，按需修改，不想要就整个注释掉。avatar 的路径根目录在themes/icarus/source下面，如果开始不是在github上直接clone而是使用npm进行下载的话，就需要点开node_modeules进行图片的添加了。这显然是十分不雅的。其中最麻烦的地方在于social_links的图标制作。需要去阿里的矢量图标素材库，将合适的图标全部放入购物车后点击代码下载。将下载到的文件中的iconfont.css和iconfont.ttf放置到theme/icarus/source/css文件夹内，再打开theme/icarus/layout/widget/profile.jsx 找个喜欢的位置把&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/iconfont.css&quot;&gt;&lt;/link&gt;给放进去,当然一般是开头。如下 123456789return &lt;div class=&quot;level is-mobile is-multiline&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/iconfont.css&quot;&gt;&lt;/link&gt; {links.filter(link =&gt; typeof link === 'object').map(link =&gt; { return &lt;a class=&quot;level-item button is-transparent is-marginless&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title={link.name} href={link.url}&gt; {'icon' in link ? &lt;i class={link.icon}&gt;&lt;/i&gt; : link.name} &lt;/a&gt;; })}&lt;/div&gt;; layout文件夹中放了很多jsx文件，里面的目录都比较清晰，可以看出来分别是定义哪一部分样式的。jsx虽然没接触过，但是看样子就是一些动态构建Html的格式,直接修改return中的内容就可以了文件放进去之后就可以在上面代码中的icon来写上CSS了。 语言修改首先是修改icarus中各种控件的语言:进入_config.yml，找到language项，将en改成zh-CN接着是修改导航栏的语言:进入icarus.yml，找到navbar的menu项，原来是英文，自己把它改成中文就可以了 12345678navbar: # Navigation menu items menu: 主页: / 文章: /archives 分类: /categories # Tags: /tags # About: /about 语言修改这一栏比较迷，搞不清楚那些是属于icarus的，哪些是属于hexo的。 修改主页和文章页面的布局修改控件布局：我把自己的主页改成了三列，可以通过config.icarus中控件的positoin项来进行修改（left或者right）在自己使用Hexo server来打开查看的时候，会明显地感觉到其页面布局看着太窄，两边留白很多。所以我们需要去修改其CSS通过浏览器开发者页面，我们可以看到，网页的css基本上都是由一个default.css来定义的。平时肯定不是这样的情况，结合自己对网站文件结构的观察，发现CSS都是由各种styl文件定义的。惊过查阅资料，可以得知styl也是一个动态定义CSS的文件格式。其内容都在icarus的include文件夹中。而定义页面布局的CSS就是responsive.styl。显然，这个is-2-coloum是判断布局是两列的格式还是三列我们在图片里可以看到它定义的东西（我把自己改成了三列，），但是实际上检查元素的时候并找不到is-3-coloum的，我在responsive里面也只看到了关于一列、两列的判断，并没有三列或者单独的container，所以可以判断这个container是放在一些别的地方，比如node_modules里面的。如果想要在第三列的情况下让我们对其样式进行修改，减小留白宽度的话，就需要对style.styl里面的内容进行修改。依样画葫芦，进行修改，结果如下。 1234567891011121314+widescreen() .is-1-column .container, .is-2-column .container ,.is-3-column .container max-width: $widescreen - 2 * $gap width: $widescreen - 2 * $gap+fullhd() .is-2-column .container, .is-3-column .container max-width: $fullhd - 2 * $gap width: $fullhd - 2 * $gap .is-1-column .container max-width: $widescreen - 2 * $gap width: $widescreen - 2 * $gap 修改后主页的查看元素就变成了预计的样子但实际上效果仍然不满意，我们可以找到base.styl修改一下widescreen fullhd所定义的大小来达到自己的目的。下面是修改后的结果 12345$gap ?= 64px$tablet ?= 769px$desktop ?= 1280px$widescreen ?= 1600px$fullhd ?= 1920px 接下来要修改文章页面的布局了，我想要让主页面有三栏，文章页面只有两栏，并且控件的数量不同，该如何修改呢？这是我从不知道哪里看来的办法，在根目录增加一个config文件，命名为_config.post.yml，然后将config.icarus一部分的控件复制进来，并进行属性修改，就可以达成目标了。(这个方法应该会写在hexo的文档里面，看过icarus的了，没有) 小结这就是全部的过程了，在配置自己的博客的过程中，花了很多时间去理解，希望自己的理解能对其他人有帮助。我也不打算继续美化了，因为博客还是要以发挥自己作为笔记的功能为主。","link":"/2022/04/12/hexo%E4%B9%8Bicarus%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E7%A8%8B/"},{"title":"Leetcode002 �������","text":"��������������������ȥ0λ���Լ������������ڴ����⡣ ������һ����Ŀ 12345678// Definition for singly-linked list. struct ListNode { int val; ListNode *next; ListNode() : val(0), next(nullptr) {} ListNode(int x) : val(x), next(nullptr) {} ListNode(int x, ListNode *next) : val(x), next(next) {}* }; �����Ǻܼ򵥵ģ���Ҫע�⼸��1.�����������Ȳ�ͬ2.�������������ܽ�λ�����ӳ���д��answer-&gt;next = new ListNode(val);һ�о����ˣ�֮ǰ������new���ص���ָ�롣 �򻯵Ĳ�����������while����У��ж����������Ƿ�Ϊ�յĲ���֮ǰʹ�õ���ͨ��flag���ж�l1-&gt;next��״̬��Ȼ���ֿ���ֱ����l1=l1-&gt;next ,֮����While�������ж��м���l1 l2�Ƿ�Ϊ�վͿ��������ڽ�����Ӹ�ֵ��ʱ��Ҳ�ܼ�����Ԫ����ʽ�� 12int x = l1 == null ? 0 : l1.val; int y = l2 == null ? 0 : l2.val; ��������һ���������ڴ�����һ����˵��������Ҫ����һ���յ����������ǵ�һ��Ӧ�ø�ʲô����ֵ�أ���һ��ʼ���뷨���Ȳ���ֵ���������ȥ�����Ļ���while����Ҫһ��ֵ���ж��Ƿ��һ�ν��и�ֵ�����һ����һ����ֵ��ڴ���󣬹۲���֮������Ϊ������һ���ͺ���Ľڵ�֮��ĵ�ַ���������ģ���������Ǳ������󣬵���ȷʵ����ִ��� 12345 //���ڴ�ӡ��l3��ȫ��ֵwhile (l3-&gt;next != nullptr) { cout &lt;&lt; l3-&gt;val &lt;&lt; &quot; &quot;; l3 = l3-&gt;next;} ���Ǹ��õĴ����취����㸳һ��ֵ������ֱ��������һ���ڵ�,�������Խ�һ�����ٴ�������Ҳ���Ա�����������⡣ ��ʼ�Ĵ���ŵ���󣨾��ǻ�����ڴ�����Ĵ��룩������������ܰ��ҿ�һ�µĻ����ٺò����� 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include&lt;iostream&gt;using namespace std;struct ListNode { int val; ListNode *next; ListNode() : val(0), next(nullptr) {} ListNode(int x) : val(x), next(nullptr) {} ListNode(int x, ListNode *next) : val(x), next(next) {}};class Solution {public: ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { //׼��һ�������������λ //���ǵ�1.�������� 2.��Ҫ�ӳ����������� //��һ���µ��б����д洢�����û�о���0 int temp = 0, val; ListNode first; ListNode* answer = &amp;first; ListNode* firstptr = answer; int count = 0; bool flag1 = true, flag2 = true; int left, right; while (true) { if (flag1 == true || flag2 == true) { if (flag1 == true) left = l1-&gt;val; else left = 0; if (flag2 == true) right = l2-&gt;val; else right = 0; val = (left + right + temp) % 10; temp = (left + right + temp) / 10; ListNode* node = new ListNode(val); if (count == 0) { answer-&gt;val = val; } else { answer-&gt;next = node; answer = answer-&gt;next; } if (l1-&gt;next == nullptr) flag1 = false; else l1 = l1-&gt;next; if (l2-&gt;next == nullptr) flag2 = false; else l2 = l2-&gt;next; count++; } else break; } if (temp != 0) { ListNode* node = new ListNode(temp); answer-&gt;next = node; } return firstptr; }};void prints(ListNode* l) { while (l-&gt;next != nullptr) { cout &lt;&lt; l-&gt;val &lt;&lt; &quot; &quot;; l = l-&gt;next; } cout &lt;&lt; l-&gt;val &lt;&lt; &quot; &quot;; cout &lt;&lt; endl; return;}int main() { Solution s; ListNode c(3), b(4, &amp;c), a(2, &amp;b), f(4),e(6, &amp;f),d(5, &amp;e) ; ListNode* l1 = &amp;a; ListNode* l2 = &amp;d; ListNode* l3=s.addTwoNumbers(l1, l2); while (l3-&gt;next != nullptr) { cout &lt;&lt; l3-&gt;val &lt;&lt; &quot; &quot;; l3 = l3-&gt;next; } cout &lt;&lt; l3-&gt;val &lt;&lt; &quot; &quot;; cout &lt;&lt; endl; return 0;}","link":"/2022/04/13/leetcode002-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"},{"title":"leetcode003-无重复字符子串","text":"滑动窗口,关于子串的思考 最暴力的解法不说了说一下滑动窗口的原理，很多人讲要用滑动窗口来解决，但是并没有讲到为什么滑动窗口不会漏掉子串。字串就是两个指针的排列方式，分别是头尾指针。固定头指针，不断向后移动尾部就可以逐渐遍历完头指针在该情况下的所有字串。所以，每当发现尾部的字母重复，说明头指针在这里已经没有了希望，就需要换头指针，即向后移动。在这里，可以优化的地方就是在查找是否有重复的字符方面。关于这方面的排序，我们可以创建一个大于123的数组，然后用喜闻乐见的方式进行O（1）的复杂度进行排序和查找。","link":"/2022/04/15/leetcode003/"},{"title":"JavaWeb项目修改总结","text":"因为要做另外一个项目，就把以前的项目进行修改交上去。但是在修改的过程中仍然遇到了一些问题。这里做一个总结 后端修改项目地址这里说的项目地址，就是在调试的时候的url,比如 localhost/qihuo/ ，我想把它修改成 localhost/user/一开始想到的就是修改Project Struture,把Artifacts中的名称修改为目标项目名。然后是修改Tomcat的设置（右上角的configurations），将url改一改（这个是打开的Url）。但是修改后发现还是不对。使用的仍然是原来的名称。于是查了后发现在.idea文件中有一个workplace.xml文件。下面有一项没有跟着修改，就是option一项。 123456789101112131415&lt;deployment&gt;&lt;artifact name=&quot;user:war exploded&quot;&gt; &lt;settings&gt; &lt;option name=&quot;CONTEXT_PATH&quot; value=&quot;/user&quot; /&gt; &lt;/settings&gt;&lt;/artifact&gt;&lt;/deployment&gt;``` # 前端前端要改出这样的东西![](https://i0.hdslb.com/bfs/album/892a98bbede5532da5edf971a5e204cef0e1b098.png)### 图片自适应父元素大小其中每一行使用bootstrap的row标签就可以了（自己曾经想试着弄出一行但是失败了,不过我对前端也不太了解那么深，看了一下bootstrap源码也看不懂就算了），这个在做的过程中忘记了导致浪费了一些时间。 图片对框的适配，如果图片过小、过大就会出现的问题img框的width就-webkit-fill-available（没见过的东西，记笔记，但是不是对所有的浏览器有效）或者width:100%，auto是不行的，如果图片过大会超出父元素。然后看到了两个地方的说法。 1.width:100% 100%表示子元素的宽度和父元素的宽度相等,其中并不包括子元素内外边距以及边框的值,为子元素真正的宽度2.width:auto auto表示子元素的 宽度+内边距+外边距+边框 才等于父元素的宽度 123![](https://i0.hdslb.com/bfs/album/176145761daccd93d642f659380b4acbed79fb12.png)### 按钮居中排列然后是按钮的居中问题，我的做法是用row 然后col分出不同的div，让按钮在div中居中,按钮需要设置为块级元素然后marigin:auto display: block; margin: 0 auto;","link":"/2022/04/18/web%E9%A1%B9%E7%9B%AE%E4%BF%AE%E6%94%B9/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"leetcode","slug":"leetcode","link":"/tags/leetcode/"},{"name":"JavaWeb","slug":"JavaWeb","link":"/tags/JavaWeb/"}],"categories":[{"name":"hexo配置","slug":"hexo配置","link":"/categories/hexo%E9%85%8D%E7%BD%AE/"},{"name":"leetcode�ʼ�","slug":"leetcode�ʼ�","link":"/categories/leetcode%EF%BF%BD%CA%BC%EF%BF%BD/"},{"name":"leetcode","slug":"leetcode","link":"/categories/leetcode/"},{"name":"JavaWeb","slug":"JavaWeb","link":"/categories/JavaWeb/"}]}